// <auto-generated />

using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;

namespace BankApplication.Data.Migrations
{
    [DbContext(typeof(BankDataContext))]
    [Migration("20200329193316_InitialCreateDB")]
    partial class InitialCreateDB
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("UniversityApplication.Data.Models.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(400)")
                        .HasMaxLength(400)
                        .IsUnicode(true);

                    b.Property<int>("Type")
                        .HasColumnName("AccountTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("Accounts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Balance = 7900m,
                            ClientId = 1,
                            IsActive = true,
                            Name = "Personal Account",
                            Type = 2
                        },
                        new
                        {
                            Id = 2,
                            Balance = 1m,
                            ClientId = 2,
                            IsActive = false,
                            Name = "MasterCard",
                            Type = 3
                        },
                        new
                        {
                            Id = 3,
                            Balance = 5688.40m,
                            ClientId = 2,
                            IsActive = true,
                            Name = "MasterCard",
                            Type = 3
                        },
                        new
                        {
                            Id = 4,
                            Balance = -55000.40m,
                            ClientId = 2,
                            IsActive = true,
                            Name = "Housing Load",
                            Type = 4
                        },
                        new
                        {
                            Id = 7,
                            Balance = 200500.50m,
                            ClientId = 4,
                            IsActive = true,
                            Name = "Salary Account",
                            Type = 1
                        },
                        new
                        {
                            Id = 8,
                            Balance = 433833.23m,
                            ClientId = 4,
                            IsActive = true,
                            Name = "Cash Management",
                            Type = 2
                        },
                        new
                        {
                            Id = 5,
                            Balance = 240000.00m,
                            ClientId = 3,
                            IsActive = true,
                            Name = "Salary Account",
                            Type = 1
                        },
                        new
                        {
                            Id = 6,
                            Balance = 500000.70m,
                            ClientId = 3,
                            IsActive = true,
                            Name = "Cash Management",
                            Type = 2
                        });
                });

            modelBuilder.Entity("UniversityApplication.Data.Models.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(400)")
                        .HasMaxLength(400)
                        .IsUnicode(true);

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(400)")
                        .HasMaxLength(400)
                        .IsUnicode(true);

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(400)")
                        .HasMaxLength(400)
                        .IsUnicode(true);

                    b.HasKey("Id");

                    b.ToTable("Addresses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            City = "Stockholm",
                            Country = "Sweden",
                            Street = "Killdeer Pass"
                        },
                        new
                        {
                            Id = 2,
                            City = "London",
                            Country = "United Kingdom",
                            Street = "Ridgeway Parkway"
                        },
                        new
                        {
                            Id = 3,
                            City = "New York",
                            Country = "United States",
                            Street = "Southridge Hill"
                        },
                        new
                        {
                            Id = 4,
                            City = "Tokyo",
                            Country = "Japan",
                            Street = "Forest Park"
                        });
                });

            modelBuilder.Entity("UniversityApplication.Data.Models.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AddressId")
                        .HasColumnName("AddressId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(400)")
                        .HasMaxLength(400)
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200)
                        .IsUnicode(true);

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20)
                        .IsUnicode(true);

                    b.Property<int>("Type")
                        .HasColumnName("ClientTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("Clients");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AddressId = 1,
                            Email = "NicolineAbspoel@gmail.com",
                            Name = "Nicoline Abspoel",
                            PhoneNumber = "077-999-999",
                            Type = 1
                        },
                        new
                        {
                            Id = 2,
                            AddressId = 2,
                            Email = "akennard@firm.com",
                            Name = "Andrew Kennard",
                            PhoneNumber = "+38976999999",
                            Type = 1
                        },
                        new
                        {
                            Id = 3,
                            AddressId = 3,
                            Email = "info@google.com",
                            Name = "Google",
                            PhoneNumber = "1111111111111",
                            Type = 2
                        },
                        new
                        {
                            Id = 4,
                            AddressId = 4,
                            Email = "info@microsoft.com",
                            Name = "Microsoft",
                            PhoneNumber = "32-3231-354",
                            Type = 2
                        });
                });

            modelBuilder.Entity("UniversityApplication.Data.Models.Account", b =>
                {
                    b.HasOne("UniversityApplication.Data.Models.Client", "Client")
                        .WithMany("Accounts")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UniversityApplication.Data.Models.Client", b =>
                {
                    b.HasOne("UniversityApplication.Data.Models.Address", "Address")
                        .WithMany("Clients")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
